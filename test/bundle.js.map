{"version":3,"file":"bundle.js","sources":["oner-storage.spec.js","env.spec.js"],"sourcesContent":["// https://github.com/Automattic/expect.js\ndocument.getElementById('mode').innerHTML = onerStorage.supportStorage ? 'localStorage可用' : 'localStorage不可用'\n\nlet count = 1\nconst getId = function () {\n  return count++\n}\n\n// const _describe = function () {}\n// const _it = function (name, fn) {fn()}\n\ndescribe('onerStorage v__VERSION__ Unit Test', function() {\n\n  describe('static', function () {\n    it('version v__VERSION__', function () {\n      expect(onerStorage.version).to.equal('__VERSION__')\n    })\n    it('supportStorage', function () {\n      expect(onerStorage.supportStorage).to.be.a('boolean')\n    })\n  })\n\n  describe('`data/set/get` method', function () {\n    let ls\n\n    beforeEach('reset', function () {\n      ls = onerStorage({\n        type: 'localStorage',\n        key: 'foo',\n      })\n    })\n\n    afterEach('clear', function () {\n      ls.destroy()\n    })\n\n    it('`data` method, then get value', function () {\n      ls.data({\n        'foo': 'x',\n      })\n\n      expect(ls.get('foo')).to.be('x')\n      expect(JSON.stringify(ls.get())).to.be('{\"foo\":\"x\"}')\n    })\n\n    it('`data` method + `set` method，then get value', function () {\n      ls.data({\n        'foo': 'x',\n      })\n\n      ls.set('bar.y', 'y')\n\n      expect(ls.get('bar.y')).to.be('y')\n      console.log('JSON.stringify(ls.get())', JSON.stringify(ls.get()))\n      expect(JSON.stringify(ls.get())).to.be('{\"foo\":\"x\",\"bar\":{\"y\":\"y\"}}')\n    })\n  })\n\n  describe('`set/has` method', function () {\n    let ls\n\n    beforeEach('reset', function () {\n      ls = onerStorage({\n        type: 'localStorage',\n        key: 'foo',\n      })\n    })\n\n    afterEach('clear', function () {\n      ls.destroy()\n    })\n\n    it('`has` method without any argument: throw error', function () {\n      ls.set('foo', 'x')\n      const hasErrorFn = function () {\n        ls.has()\n      }\n      expect(hasErrorFn).to.throwError()\n    })\n\n    it('`has` method with `key`: has value', function () {\n      ls.set('foo', 'x')\n      const result = ls.has('foo')\n      expect(result.has).to.be(true)\n      expect(result.value).to.be('x')\n    })\n\n    it('`has` method with `key`: no value', function () {\n      ls.set('foo', 'x')\n      const result = ls.has('boo')\n      expect(result.has).to.be(false)\n      expect(result.value).to.be(undefined)\n    })\n\n    it('`has` method with `path`: has value', function () {\n      ls.set('foo.y', 'y')\n      const result = ls.has('foo')\n      expect(result.has).to.be(true)\n      expect(result.value.y).to.be('y')\n    })\n\n    it('`has` method with `path`: no value', function () {\n      ls.set('foo.y', 'y')\n      const result = ls.has('foo.y.z')\n      expect(result.has).to.be(false)\n      expect(result.value).to.be(undefined)\n    })\n  })\n\n\n  describe('`set/get` method', function () {\n    let ls\n\n    beforeEach('reset', function () {\n      ls = onerStorage({\n        type: 'localStorage',\n        key: 'foo',\n      })\n    })\n\n    afterEach('clear', function () {\n      ls.destroy()\n    })\n\n    it('`get` method without `key|path` argument should return all data', function () {\n      ls.set('foo', 'x')\n\n      // 没有传入`path`，则返回整个缓存值\n      expect(JSON.stringify(ls.get())).to.be('{\"foo\":\"x\"}')\n    })\n\n    it('`get` method with `key`', function () {\n      ls.set('foo', 'x')\n\n      // 没有传入`path`，则返回整个缓存值\n      expect(ls.get('foo')).to.be('x')\n    })\n\n    it('`get` a false like value', function () {\n      ls.set('foo', 0)\n\n      // 没有传入`path`，则返回整个缓存值\n      expect(ls.get('foo')).to.be(0)\n    })\n\n    it('`get` with fallback value', function () {\n      // 没有传入`path`，则返回整个缓存值\n      expect(ls.get('foo', 'x')).to.be('x')\n    })\n\n    it('`set` method with wrong `path`', function () {\n      ls.set('foo', 'x')\n\n      const errorSet = function () {\n        // 给字符串又设置了属性值 应该抛错\n        ls.set('foo.boo', 'y')\n      }\n      expect(errorSet).to.throwError()\n      // set出错以后 需要恢复原值\n      expect(JSON.stringify(ls.get())).to.be('{\"foo\":\"x\"}')\n    })\n\n    it('`get` method with `\\\\\\\\ path`', function () {\n      ls.set('x.y\\\\.y.z', 'x')\n\n      // 没有传入`path`，则返回整个缓存值\n      expect(ls.get('x.y\\\\.y.z')).to.be('x')\n    })\n\n    it('`set` method with `undefined` value', function () {\n      ls.set('foo', undefined)\n      // 此时\n      // `storage`里对应的值的\"{}\"\n      // 而`ls._data`的值是 {x: undefined}\n      // `JSON.stringify`会删除值为`undefined`的键\n      // 没有传入`path`，则返回整个缓存值\n      expect(JSON.stringify(ls.get())).to.be('{}')\n    })\n\n    it(`setting non-string for the key, should throw error`, function () {\n      const foo = onerStorage({\n        type: 'variable',\n        key: 'foo',\n      })\n\n      const hasErrorFn = function () {\n        ls.set(true, {\n          dev: true,\n          pro: false,\n        })\n      }\n\n      expect(hasErrorFn).to.throwError()\n\n      foo.destroy()\n    })\n  })\n\n  describe('`set/sure` method', function () {\n    it('throw error when get undefined', function () {\n      const ls = onerStorage({\n        type: 'localStorage',\n        key: 'foo',\n      })\n\n      const hasErrorFn = () => {\n        ls.sure('foo.b')\n      }\n\n      expect(hasErrorFn).to.throwError()\n    })\n  })\n\n  describe('`set/remove` method', function () {\n    let ls\n    const value = {\n      x: {\n        y: {\n          z: 'z',\n          zz: 'zz',\n        },\n      },\n    }\n\n    beforeEach('reset', function () {\n      ls = onerStorage({\n        type: 'localStorage',\n        key: 'foo',\n      })\n    })\n\n    afterEach('clear', function () {\n      ls.destroy()\n    })\n\n    it('remove partial data by path', function() {\n      ls.set('foo', value)\n      ls.remove('foo.x.y.z')\n      expect(ls.get('foo.x.y.zz')).to.be('zz')\n    })\n\n    it('remove complete data by path', function () {\n      ls.set('foo', value)\n      ls.remove('foo.x.y')\n      expect(JSON.stringify(ls.get('foo.x'))).to.be('{}')\n    })\n\n    it('remove by a un-existed path', function () {\n      ls.set('foo', value)\n      ls.remove('foo.boo')\n      expect(JSON.stringify(ls.get('foo'))).to.be(JSON.stringify(value))\n    })\n\n    it('remove all data', function () {\n      ls.set('foo', value)\n      ls.remove()\n      expect(JSON.stringify(ls.get())).to.be('{}')\n    })\n  })\n\n  describe('destroy', function () {\n    it('call method after `destroy` should throw error', function () {\n      const ls = onerStorage({\n        type: 'localStorage',\n        key: 'foo',\n      })\n      ls.set('foo', 'x')\n      ls.destroy()\n\n      // 销毁之后就不能再调用任何方法了\n      const hasError = function () {\n        ls.get()\n      }\n      expect(hasError).to.throwError()\n    })\n  })\n\n  describe('`asyncSet/asyncGet` method', function () {\n    let ls\n\n    beforeEach('reset', function () {\n      ls = onerStorage({\n        type: 'localStorage',\n        key: 'foo',\n      })\n    })\n\n    afterEach('clear', function () {\n      ls.destroy()\n    })\n\n    it('`asyncGet` method without `key` argument should return all data', function (done) {\n      ls.asyncSet('foo', 'x').then(() => {\n        // 没有传入`path`，则返回整个缓存值\n        ls.asyncGet().then(data => {\n          expect(JSON.stringify(data)).to.be('{\"foo\":\"x\"}')\n          done()\n        })\n      })\n    })\n\n    it('`asyncSet` method with wrong `path`', function (done) {\n      ls.set('foo', 'x')\n\n      // 给字符串又设置了属性值 应该抛错\n      ls.asyncSet('foo.boo', 'y').then(() => {}).catch(() => {\n        // set出错以后 需要恢复原值\n        expect(JSON.stringify(ls.get())).to.be('{\"foo\":\"x\"}')\n        done()\n      })\n    })\n  })\n\n  describe('valid checking', function() {\n\n    it('`tag` checking: invalid', function(){\n      const id = getId()\n      const ls = onerStorage({\n        type: 'localStorage',\n        key: id, // 保证之前不存在\n        tag: '1.0',\n      })\n\n      ls.set('foo', 'x')\n\n      // 版本过期\n      const ls2 = onerStorage({\n        type: 'localStorage',\n        key: id, // 保证之前存在\n        tag: '2.0',\n      })\n\n      expect(JSON.stringify(ls2.get())).to.be('{}')\n      ls.destroy()\n      ls2.destroy()\n    })\n\n    it('`tag` checking: valid', function() {\n      const id = getId()\n      const ls = onerStorage({\n        type: 'localStorage',\n        key: id, // 保证之前不存在\n        tag: '1.0',\n      })\n\n      ls.set('foo', 'x')\n\n      // 版本不过期\n      const ls2 = onerStorage({\n        type: 'localStorage',\n        key: id, // 保证之前存在\n        tag: '1.0',\n      })\n\n      expect(ls2.get('foo')).to.be('x')\n\n      ls.destroy()\n    })\n\n    it('`duration` checking：invalid', function (done) {\n      const id = 'test-expire'\n      const ls = onerStorage({\n        type: 'localStorage',\n        key: id,\n        duration: 200,\n      })\n\n      ls.set('foo', 'x')\n\n      // 利用`setTimeout`创建过期\n      setTimeout(function () {\n        const ls2 = onerStorage({\n          type: 'localStorage',\n          key: id,\n          duration: 200,\n        })\n\n        try {\n          expect(JSON.stringify(ls2.get())).to.be('{}')\n          ls.destroy()\n          ls2.destroy()\n          done()\n        } catch (e) {\n          done(e)\n        }\n      }, 300)\n    })\n\n    it('`duration` checking：valid', function () {\n      const id = 'test-expire'\n      const ls = onerStorage({\n        type: 'localStorage',\n        key: id,\n        duration: 200,\n      })\n\n      ls.set('foo', 'x')\n\n      const ls2 = onerStorage({\n        type: 'localStorage',\n        key: id,\n        duration: 200,\n      })\n\n      expect(ls2.get().foo).to.be('x')\n      ls.destroy()\n      ls2.destroy()\n    })\n\n    it('`until` checking: invalid', function () {\n      const id = 'until-invalid'\n      const ls = onerStorage({\n        type: 'localStorage',\n        key: id,\n        until: new Date(new Date().getTime() -1000).getTime(), // 永远的上一秒\n      })\n\n      ls.set('foo', 'x')\n\n      const ls2 = onerStorage({\n        type: 'localStorage',\n        key: id,\n      })\n\n      expect(JSON.stringify(ls2.get())).to.be('{}')\n      ls.destroy()\n      ls2.destroy()\n    })\n\n    it('`until` checking: valid', function () {\n      const id = 'until-valid'\n      const ls = onerStorage({\n        type: 'localStorage',\n        key: id,\n        until: new Date().getTime() + 1000*60*60,\n      })\n\n      ls.set('x', 'x')\n\n      const ls2 = onerStorage({\n        type: 'localStorage',\n        key: id,\n      })\n\n      expect(JSON.stringify(ls2.get())).to.be('{\"x\":\"x\"}')\n      ls.destroy()\n      ls2.destroy()\n    })\n  })\n\n  describe('clean', function () {\n    it('clean up `until` invalid storage', function () {\n\n      // 这是一个过期的缓存对象\n      const ls1 = onerStorage({\n        type: 'localStorage',\n        key: 'clean',\n        until: new Date(new Date().getTime() -1000).getTime(), // 永远的上一秒\n      })\n\n      ls1.set('foo', 'x')\n\n      // ls1的数据被清掉了\n      onerStorage.clean()\n\n      // 不会有数据\n      const ls1next = onerStorage({\n        type: 'localStorage',\n        key: 'clean-until',\n      })\n\n      expect(JSON.stringify(ls1next.get())).to.be('{}')\n      ls1next.destroy()\n    })\n\n    it('clean up `duration` invalid storage', function (done) {\n      // 这是一个过期的缓存对象\n      const ls1 = onerStorage({\n        type: 'localStorage',\n        key: 'clean-duration',\n        duration: 100,\n      })\n\n      ls1.set('foo', 'x')\n\n      // ls1的数据被清掉了\n      onerStorage.clean()\n\n      setTimeout(function () {\n        // 不会有数据\n        const ls1next = onerStorage({\n          type: 'localStorage',\n          key: 'clean-duration',\n        })\n        expect(JSON.stringify(ls1next.get())).to.be('{}')\n        ls1next.destroy()\n        done()\n      }, 300)\n    })\n  })\n})\n","// const _describe = function () {}\n// const _it = function (name, fn) {fn()}\n\ndescribe('onerStorage.env', function() {\n\n  it('get value by env', function () {\n    const storage = onerStorage({\n      type: 'variable',\n      key: 'config',\n    })\n\n    // 使用场景下这个值不是写死的，是运行环境的值\n    const NODE_ENV = 'development'\n\n    storage.set('api', onerStorage.env(NODE_ENV, {\n      development: 'http://0.0.0.0/api',\n      production: 'http://foo.com/api',\n    }))\n\n    expect(storage.get('api')).to.be('http://0.0.0.0/api')\n  })\n\n  it('get `undefined` by env', function () {\n    const storage = onerStorage({\n      type: 'variable',\n      key: 'config',\n    })\n\n    // 使用场景下这个值不是写死的，是运行环境的值\n    const NODE_ENV = 'test'\n\n    storage.set('api', onerStorage.env(NODE_ENV, {\n      development: 'http://0.0.0.0/api',\n      production: 'http://foo.com/api',\n    }))\n\n    expect(storage.get('api')).to.be(undefined)\n  })\n\n  it('can not set value on env instance', function () {\n    const storage = onerStorage({\n      type: 'variable',\n      key: 'config',\n    })\n\n    // 使用场景下这个值不是写死的，是运行环境的值\n    const NODE_ENV = 'production'\n\n    storage.set('foo.api', onerStorage.env(NODE_ENV, {\n      development: 'http://0.0.0.0/api',\n      production: 'http://foo.com/api',\n    }))\n\n    // `env`对象不是`PlantObject`节点，所以不能有下层`path`，继续赋值会抛错\n    const hasErrorFn = () => {\n      storage.set('foo.api.test', 'hello')\n    }\n    expect(hasErrorFn).to.throwError()\n  })\n\n  it('env can not be used for localStorage', function () {\n    const storage = onerStorage({\n      type: 'localStorage',\n      key: 'config',\n    })\n\n    const hasErrorFn = () => {\n      storage.set('api', onerStorage.env('development', {\n        development: 'http://0.0.0.0/api',\n      }))\n    }\n\n    expect(hasErrorFn).to.throwError()\n  })\n\n  it('env can not be used for sessionStorage', function () {\n    const storage = onerStorage({\n      type: 'sessionStorage',\n      key: 'config',\n    })\n\n    const hasErrorFn = () => {\n      storage.set('api', onerStorage.env('development', {\n        development: 'http://0.0.0.0/api',\n      }))\n    }\n\n    expect(hasErrorFn).to.throwError()\n  })\n})"],"names":["document","getElementById","innerHTML","onerStorage","supportStorage","let","count","getId","describe","it","expect","version","to","equal","be","a","ls","beforeEach","type","key","afterEach","destroy","data","foo","get","JSON","stringify","set","console","log","const","hasErrorFn","has","throwError","result","value","undefined","y","errorSet","dev","pro","sure","x","z","zz","remove","hasError","done","asyncSet","then","asyncGet","id","tag","ls2","duration","setTimeout","e","until","Date","getTime","clean","ls1next","storage","env","development","production"],"mappings":"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"}